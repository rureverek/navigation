#include <costmap_2d/costmap_2d.h>
#include <base_local_planner/trajectory.h>

namespace potential_field {

class PotentialFieldPlanner
{
private:
    costmap_2d::Costmap2D local_costmap_;
    base_local_planner::MapGridVisualizer map_viz_; ///< @brief The map grid visualizer for outputting the potential field generated by the cost function
    base_local_planner::LocalPlannerUtil *planner_util_;
    std::vector<geometry_msgs::PoseStamped> global_plan_;

public:
      /**
       * @brief  Constructor for the planner
       * @param name The name of the planner 
       * @param costmap_ros A pointer to the costmap instance the planner should use
       * @param global_frame the frame id of the tf frame to use
       */
    PotentialFieldPlanner(std::string name, base_local_planner::LocalPlannerUtil *planner_util);
    /**
     * @brief Destroy the Potential Field Planner object
     * 
     */
    ~PotentialFieldPlanner(){};

    /**
     * @brief Create Repulsive Field Map based on Inflated Obstacle Layer / Sensor Data
     * 
     * @param local_costmap 
     * @return costmap_2d::Costmap2D 
     */
    costmap_2d::Costmap2D InitialiseCostMap(costmap_2d::Costmap2D _local_costmap);

    /**
     * @brief Create Attractive Field Map based on local goal
     * 
     * @param orig_global_plan 
     * @return costmap_2d::Costmap2D 
     */
    costmap_2d::Costmap2D SetGoalMap(const std::vector<geometry_msgs::PoseStamped>& _orig_global_plan);

    /**
     * @brief Combine Repulsive and Attractive Fields in PotentialField
     * 
     * @param attract_field 
     * @param repulsive_field 
     * @return costmap_2d::Costmap2D 
     */
    costmap_2d::Costmap2D SetPotentialFieldMap(costmap_2d::Costmap2D _attract_field, costmap_2d::Costmap2D _repulsive_field);

    /**
     * @brief Calculate Cost of trajectory
     * 
     * @param potential_field 
     * @param traj 
     * @return double 
     */
    double PotentialFieldCostFunction(costmap_2d::Costmap2D _potential_field, base_local_planner::Trajectory _traj);
};

};